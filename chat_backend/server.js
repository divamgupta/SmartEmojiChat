// Generated by CoffeeScript 1.10.0

/*
	Author Divam Gupta
	Date Oct 14 2015

	this scriot will run in the webserver and is a brudge form the linux pc and webbrowsers
 */

(function() {
  var activeConnections, activeUsers, app, clearQueue, express, getUserFromToken, io, io_pc, messenger, print, server, tmpToSentQ;

  print = console.log;

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  server.listen(process.env.PORT || 3000);

  app.use(express["static"]('../frontend'));

  activeConnections = {};

  activeUsers = {};

  io_pc = void 0;

  print("hello friends");

  getUserFromToken = function(x) {
    return x;
  };

  io.on('connection', function(socket) {
    print('a new user connection connection');
    socket.browserId = (Math.random().toString(36) + '00000000000000000').slice(2, 14 + 2);
    activeConnections[socket.browserId] = socket;
    socket.on('register_client', function(data) {
      var userName, userToken;
      if (socket.userToken != null) {
        return;
      }
      userToken = data.userToken;
      userName = getUserFromToken(data.userToken);
      socket.userName = userName;
      socket.userToken = userToken;
      if (activeUsers[userName] == null) {
        activeUsers[userName] = {};
      }
      activeUsers[userName][socket.browserId] = true;
      socket.emit('sys_msg', 'registered');
      print("registered");
      return clearQueue(userName);
    });
    socket.on('send_msg', function(data) {
      if (socket.userToken == null) {
        print("user not registered");
      }
      return messenger.addToQueue(socket.userName, data.to_username, data.msg);
    });
    return socket.on('disconnect', function() {
      print('a stupid user left  ');
      delete activeConnections[socket.browserId];
      if (activeUsers[socket.userName] != null) {
        return delete activeUsers[socket.userName][socket.browserId];
      }
    });
  });

  messenger = {};

  tmpToSentQ = {};

  clearQueue = function(to_user) {
    var i, len, msg, msgList, results;
    if (tmpToSentQ[to_user] == null) {
      return;
    }
    msgList = tmpToSentQ[to_user];
    tmpToSentQ[to_user] = [];
    results = [];
    for (i = 0, len = msgList.length; i < len; i++) {
      msg = msgList[i];
      results.push(messenger.addToQueue(msg[0], msg[1], msg[2]));
    }
    return results;
  };

  messenger.addToQueue = function(from_user, to_user, msg) {
    var browserId, browserIdList, i, len, msgId, results;
    msgId = (Math.random().toString(36) + '00000000000000000').slice(2, 14 + 2);
    if ((activeUsers[to_user] != null) && Object.keys(activeUsers[to_user]).length > 0) {
      browserIdList = Object.keys(activeUsers[to_user]);
      results = [];
      for (i = 0, len = browserIdList.length; i < len; i++) {
        browserId = browserIdList[i];
        results.push(activeConnections[browserId].emit('send_msg', {
          chatId: from_user,
          senderId: from_user,
          msg: msg,
          time: (new Date()).getTime()
        }));
      }
      return results;
    } else {
      print("user not online");
      if (tmpToSentQ[to_user] == null) {
        tmpToSentQ[to_user] = [];
      }
      return tmpToSentQ[to_user].push([from_user, to_user, msg]);
    }
  };

}).call(this);
